{
	"version": 3,
	"sources": [
		"InteractableMethods.ts"
	],
	"names": [
		"warnOnce",
		"is",
		"install",
		"scope",
		"Interactable",
		"actions",
		"prototype",
		"getAction",
		"ignoreFrom",
		"newValue",
		"_backCompatOption",
		"allowFrom",
		"actionChecker",
		"styleCursor",
		"defaultActionChecker",
		"pointer",
		"event",
		"interaction",
		"element",
		"action",
		"options",
		"interactable",
		"rect",
		"getRect",
		"buttons",
		"button",
		"actionName",
		"names",
		"pointerIsDown",
		"test",
		"pointerType",
		"mouseButtons",
		"checker",
		"bool",
		"func",
		"id"
	],
	"mappings": "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",
	"sourcesContent": [
		"import { warnOnce } from '../utils/index'\nimport * as is from '../utils/is'\n\n// TODO: there seems to be a @babel/preset-typescript bug causing regular import\n// syntax to remain in js output\ntype Actions = import ('@interactjs/core/scope').Actions\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    getAction: typeof getAction\n    defaultActionChecker: (pointer: any, event: any, interaction: any, element: any) => any\n    styleCursor: typeof styleCursor\n    actionChecker: typeof actionChecker\n    ignoreFrom: (...args: any) => boolean\n    allowFrom: (...args: any) => boolean\n  }\n}\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction {\n    pointerIsDown: boolean\n  }\n}\n\nfunction install (scope: Interact.Scope) {\n  const {\n    /** @lends Interactable */\n    Interactable, // tslint:disable-line no-shadowed-variable\n    actions,\n  } = scope\n\n  Interactable.prototype.getAction = getAction\n\n  /**\n   * ```js\n   * interact(element, { ignoreFrom: document.getElementById('no-action') })\n   * // or\n   * interact(element).ignoreFrom('input, textarea, a')\n   * ```\n   * @deprecated\n   * If the target of the `mousedown`, `pointerdown` or `touchstart` event or any\n   * of it's parents match the given CSS selector or Element, no\n   * drag/resize/gesture is started.\n   *\n   * Don't use this method. Instead set the `ignoreFrom` option for each action\n   * or for `pointerEvents`\n   *\n   * @example\n   * interact(targett)\n   *   .draggable({\n   *     ignoreFrom: 'input, textarea, a[href]'',\n   *   })\n   *   .pointerEvents({\n   *     ignoreFrom: '[no-pointer]',\n   *   })\n   *\n   * @param {string | Element | null} [newValue] a CSS selector string, an\n   * Element or `null` to not ignore any elements\n   * @return {string | Element | object} The current ignoreFrom value or this\n   * Interactable\n   */\n  Interactable.prototype.ignoreFrom = warnOnce(function (this: Interact.Interactable, newValue) {\n    return this._backCompatOption('ignoreFrom', newValue)\n  }, 'Interactable.ignoreFrom() has been deprecated. Use Interactble.draggable({ignoreFrom: newValue}).')\n\n  /**\n   * @deprecated\n   *\n   * A drag/resize/gesture is started only If the target of the `mousedown`,\n   * `pointerdown` or `touchstart` event or any of it's parents match the given\n   * CSS selector or Element.\n   *\n   * Don't use this method. Instead set the `allowFrom` option for each action\n   * or for `pointerEvents`\n   *\n   * @example\n   * interact(targett)\n   *   .resizable({\n   *     allowFrom: '.resize-handle',\n   *   .pointerEvents({\n   *     allowFrom: '.handle',,\n   *   })\n   *\n   * @param {string | Element | null} [newValue] a CSS selector string, an\n   * Element or `null` to allow from any element\n   * @return {string | Element | object} The current allowFrom value or this\n   * Interactable\n   */\n  Interactable.prototype.allowFrom = warnOnce(function (this: Interact.Interactable, newValue) {\n    return this._backCompatOption('allowFrom', newValue)\n  }, 'Interactable.allowFrom() has been deprecated. Use Interactble.draggable({allowFrom: newValue}).')\n\n  /**\n   * ```js\n   * interact('.resize-drag')\n   *   .resizable(true)\n   *   .draggable(true)\n   *   .actionChecker(function (pointer, event, action, interactable, element, interaction) {\n   *\n   *   if (interact.matchesSelector(event.target, '.drag-handle')) {\n   *     // force drag with handle target\n   *     action.name = drag\n   *   }\n   *   else {\n   *     // resize from the top and right edges\n   *     action.name  = 'resize'\n   *     action.edges = { top: true, right: true }\n   *   }\n   *\n   *   return action\n   * })\n   * ```\n   *\n   * Returns or sets the function used to check action to be performed on\n   * pointerDown\n   *\n   * @param {function | null} [checker] A function which takes a pointer event,\n   * defaultAction string, interactable, element and interaction as parameters\n   * and returns an object with name property 'drag' 'resize' or 'gesture' and\n   * optionally an `edges` object with boolean 'top', 'left', 'bottom' and right\n   * props.\n   * @return {Function | Interactable} The checker function or this Interactable\n   */\n  Interactable.prototype.actionChecker = actionChecker\n\n  /**\n   * Returns or sets whether the the cursor should be changed depending on the\n   * action that would be performed if the mouse were pressed and dragged.\n   *\n   * @param {boolean} [newValue]\n   * @return {boolean | Interactable} The current setting or this Interactable\n   */\n  Interactable.prototype.styleCursor = styleCursor\n\n  Interactable.prototype.defaultActionChecker = function (this: Interact.Interactable, pointer, event, interaction, element) {\n    return defaultActionChecker(this, pointer, event, interaction, element, actions)\n  }\n}\n\nfunction getAction (\n  this: Interact.Interactable,\n  pointer: Interact.PointerType,\n  event: Interact.PointerEventType,\n  interaction: Interact.Interaction,\n  element: Interact.Element,\n): Interact.ActionProps {\n  const action = this.defaultActionChecker(pointer, event, interaction, element)\n\n  if (this.options.actionChecker) {\n    return this.options.actionChecker(pointer, event, action, this, element, interaction)\n  }\n\n  return action\n}\n\nfunction defaultActionChecker (\n  interactable: Interact.Interactable,\n  pointer: Interact.PointerType,\n  event: Interact.PointerEventType,\n  interaction: Interact.Interaction,\n  element: Interact.Element,\n  actions: Actions,\n) {\n  const rect = interactable.getRect(element)\n  const buttons = (event as MouseEvent).buttons || ({\n    0: 1,\n    1: 4,\n    3: 8,\n    4: 16,\n  })[(event as MouseEvent).button as 0 | 1 | 3 | 4]\n  let action = null\n\n  for (const actionName of actions.names) {\n    // check mouseButton setting if the pointer is down\n    if (interaction.pointerIsDown &&\n        /mouse|pointer/.test(interaction.pointerType) &&\n      (buttons & interactable.options[actionName].mouseButtons) === 0) {\n      continue\n    }\n\n    action = (actions[actionName as keyof Actions] as any).checker(pointer, event, interactable, element, interaction, rect)\n\n    if (action) {\n      return action\n    }\n  }\n}\n\nfunction styleCursor (this: Interact.Interactable, newValue?: boolean) {\n  if (is.bool(newValue)) {\n    this.options.styleCursor = newValue\n\n    return this\n  }\n\n  if (newValue === null) {\n    delete this.options.styleCursor\n\n    return this\n  }\n\n  return this.options.styleCursor\n}\n\nfunction actionChecker (this: Interact.Interactable, checker: any) {\n  if (is.func(checker)) {\n    this.options.actionChecker = checker\n\n    return this\n  }\n\n  if (checker === null) {\n    delete this.options.actionChecker\n\n    return this\n  }\n\n  return this.options.actionChecker\n}\n\nexport default {\n  id: 'auto-start/interactableMethods',\n  install,\n}\n"
	]
}