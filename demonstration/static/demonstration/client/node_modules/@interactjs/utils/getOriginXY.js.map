{
	"version": 3,
	"sources": [
		"getOriginXY.ts"
	],
	"names": [
		"rectToXY",
		"resolveRectLike",
		"target",
		"element",
		"action",
		"actionOptions",
		"options",
		"actionOrigin",
		"origin",
		"originRect",
		"x",
		"y"
	],
	"mappings": "AAAA,SAASA,QAAT,EAAmBC,eAAnB;AAEA,eAAe,UAAUC,MAAV,EAAiFC,OAAjF,EAA0FC,MAA1F,EAAmG;AAChH,QAAMC,aAAa,GAAGH,MAAM,CAACI,OAAP,CAAeF,MAAf,CAAtB;AACA,QAAMG,YAAY,GAAGF,aAAa,IAAIA,aAAa,CAACG,MAApD;AACA,QAAMA,MAAM,GAAGD,YAAY,IAAIL,MAAM,CAACI,OAAP,CAAeE,MAA9C;AAEA,QAAMC,UAAU,GAAGR,eAAe,CAACO,MAAD,EAASN,MAAT,EAAiBC,OAAjB,EAA0B,CAACD,MAAM,IAAIC,OAAX,CAA1B,CAAlC;AAEA,SAAOH,QAAQ,CAACS,UAAD,CAAR,IAAwB;AAAEC,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE;AAAX,GAA/B;AACD",
	"sourcesContent": [
		"import { rectToXY, resolveRectLike } from './rect'\n\nexport default function (target: Interact.HasGetRect & { options: Interact.PerActionDefaults }, element, action?) {\n  const actionOptions = target.options[action]\n  const actionOrigin = actionOptions && actionOptions.origin\n  const origin = actionOrigin || target.options.origin\n\n  const originRect = resolveRectLike(origin, target, element, [target && element])\n\n  return rectToXY(originRect) || { x: 0, y: 0 }\n}\n"
	]
}