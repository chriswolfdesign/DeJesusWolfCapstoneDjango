{
	"version": 3,
	"sources": [
		"pointer.ts"
	],
	"names": [
		"utils",
		"start",
		"arg",
		"interaction",
		"interactable",
		"element",
		"rect",
		"state",
		"startOffset",
		"options",
		"offsets",
		"origin",
		"offsetWithOrigin",
		"getOrigin",
		"x",
		"y",
		"snapOffset",
		"offset",
		"coords",
		"page",
		"offsetRect",
		"resolveRectLike",
		"rectToXY",
		"relativePoints",
		"length",
		"index",
		"relativePoint",
		"push",
		"left",
		"width",
		"top",
		"height",
		"extend",
		"set",
		"getOriginXY",
		"prepared",
		"name",
		"targets",
		"target",
		"realX",
		"realY",
		"relativeX",
		"relativeY",
		"len",
		"snapTarget",
		"is",
		"func",
		"number",
		"range",
		"closest",
		"inRange",
		"distance",
		"dx",
		"dy",
		"i",
		"hypot",
		"Infinity",
		"optionsOrigin",
		"defaults",
		"endOnly",
		"enabled",
		"snap"
	],
	"mappings": "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",
	"sourcesContent": [
		"import * as utils from '../../utils/index'\nimport { ModifierArg, ModifierState } from '../base'\n\nexport interface SnapPosition {\n  x: number\n  y: number\n  range?: number\n}\n\nexport type SnapFunction = (\n  x: number,\n  y: number,\n  interaction: Interact.Interaction,\n  offset: Interact.Point,\n  index: number\n) => SnapPosition\nexport type SnapTarget = SnapPosition | SnapFunction\nexport interface SnapOptions {\n  targets: SnapTarget[]\n  // target range\n  range: number\n  // self points for snapping. [0,0] = top left, [1,1] = bottom right\n  relativePoints: Interact.Point[]\n  // startCoords = offset snapping from drag start page position\n  offset: Interact.Point | Interact.RectResolvable<[Interact.Interaction]> | 'startCoords'\n  offsetWithOrigin?: boolean\n  origin: Interact.RectResolvable<[Interact.Element]> | Interact.Point\n  endOnly?: boolean\n  enabled?: boolean\n}\n\nexport type SnapState = ModifierState<SnapOptions, {\n  offsets?: Interact.Point[]\n  realX?: number\n  realY?: number\n  range?: number\n  closest?: any\n  targetFields?: string[][]\n}>\n\nfunction start (arg: ModifierArg<SnapState>) {\n  const { interaction, interactable, element, rect, state, startOffset } = arg\n  const { options } = state\n  const offsets = []\n  const origin = options.offsetWithOrigin\n    ? getOrigin(arg)\n    : { x: 0, y: 0 }\n\n  let snapOffset\n\n  if (options.offset === 'startCoords') {\n    snapOffset = {\n      x: interaction.coords.start.page.x,\n      y: interaction.coords.start.page.y,\n    }\n  }\n  else  {\n    const offsetRect = utils.rect.resolveRectLike(options.offset as any, interactable, element, [interaction])\n\n    snapOffset = utils.rect.rectToXY(offsetRect) || { x: 0, y: 0 }\n    snapOffset.x += origin.x\n    snapOffset.y += origin.y\n  }\n\n  const relativePoints = options.relativePoints || []\n\n  if (rect && options.relativePoints && options.relativePoints.length) {\n    for (let index = 0; index < relativePoints.length; index++) {\n      const relativePoint = relativePoints[index]\n\n      offsets.push({\n        index,\n        relativePoint,\n        x: startOffset.left - (rect.width  * relativePoint.x) + snapOffset.x,\n        y: startOffset.top  - (rect.height * relativePoint.y) + snapOffset.y,\n      })\n    }\n  }\n  else {\n    offsets.push(utils.extend({\n      index: 0,\n      relativePoint: null,\n    }, snapOffset))\n  }\n\n  state.offsets = offsets\n}\n\nfunction set (arg: ModifierArg<SnapState>) {\n  const { interaction, coords, state } = arg\n  const { options, offsets } = state\n\n  const origin = utils.getOriginXY(interaction.interactable, interaction.element, interaction.prepared.name)\n  const page = utils.extend({}, coords)\n  const targets = []\n  let target\n\n  if (!options.offsetWithOrigin) {\n    page.x -= origin.x\n    page.y -= origin.y\n  }\n\n  state.realX = page.x\n  state.realY = page.y\n\n  for (const offset of offsets) {\n    const relativeX = page.x - offset.x\n    const relativeY = page.y - offset.y\n\n    for (let index = 0, len = options.targets.length; index < len; index++) {\n      const snapTarget = options.targets[index]\n      if (utils.is.func(snapTarget)) {\n        target = snapTarget(relativeX, relativeY, interaction, offset, index)\n      }\n      else {\n        target = snapTarget\n      }\n\n      if (!target) { continue }\n\n      targets.push({\n        x: (utils.is.number(target.x) ? target.x : relativeX) + offset.x,\n        y: (utils.is.number(target.y) ? target.y : relativeY) + offset.y,\n\n        range: utils.is.number(target.range) ? target.range : options.range,\n      })\n    }\n  }\n\n  const closest = {\n    target: null,\n    inRange: false,\n    distance: 0,\n    range: 0,\n    dx: 0,\n    dy: 0,\n  }\n\n  for (let i = 0, len = targets.length; i < len; i++) {\n    target = targets[i]\n\n    const range = target.range\n    const dx = target.x - page.x\n    const dy = target.y - page.y\n    const distance = utils.hypot(dx, dy)\n    let inRange = distance <= range\n\n    // Infinite targets count as being out of range\n    // compared to non infinite ones that are in range\n    if (range === Infinity && closest.inRange && closest.range !== Infinity) {\n      inRange = false\n    }\n\n    if (!closest.target || (inRange\n      // is the closest target in range?\n      ? (closest.inRange && range !== Infinity\n        // the pointer is relatively deeper in this target\n        ? distance / range < closest.distance / closest.range\n        // this target has Infinite range and the closest doesn't\n        : (range === Infinity && closest.range !== Infinity) ||\n          // OR this target is closer that the previous closest\n          distance < closest.distance)\n      // The other is not in range and the pointer is closer to this target\n      : (!closest.inRange && distance < closest.distance))) {\n      closest.target = target\n      closest.distance = distance\n      closest.range = range\n      closest.inRange = inRange\n      closest.dx = dx\n      closest.dy = dy\n\n      state.range = range\n    }\n  }\n\n  if (closest.inRange) {\n    coords.x = closest.target.x\n    coords.y = closest.target.y\n  }\n\n  state.closest = closest\n}\n\nfunction getOrigin (arg: Partial<ModifierArg<SnapState>>) {\n  const { element } = arg.interaction\n  const optionsOrigin = utils.rect.rectToXY(\n    utils.rect.resolveRectLike(arg.state.options.origin as any, null, null, [element]),\n  )\n  const origin = optionsOrigin || utils.getOriginXY(\n    arg.interactable,\n    element,\n    arg.interaction.prepared.name,\n  )\n\n  return origin\n}\n\nconst defaults: SnapOptions = {\n  range  : Infinity,\n  targets: null,\n  offset: null,\n  offsetWithOrigin: true,\n  origin: null,\n  relativePoints: null,\n  endOnly: false,\n  enabled: false,\n}\nconst snap = {\n  start,\n  set,\n  defaults,\n}\n\nexport default snap\n"
	]
}