{
	"version": 3,
	"sources": [
		"gesture.ts"
	],
	"names": [
		"InteractEvent",
		"ActionName",
		"utils",
		"Gesture",
		"install",
		"scope",
		"actions",
		"Interactable",
		"defaults",
		"prototype",
		"gesturable",
		"options",
		"is",
		"object",
		"gesture",
		"enabled",
		"setPerAction",
		"setOnEvents",
		"bool",
		"names",
		"push",
		"arr",
		"merge",
		"eventTypes",
		"methodDict",
		"id",
		"listeners",
		"updateGestureProps",
		"interaction",
		"angle",
		"distance",
		"scale",
		"startAngle",
		"startDistance",
		"checker",
		"_pointer",
		"_event",
		"_interactable",
		"_element",
		"pointers",
		"length",
		"name",
		"getCursor",
		"iEvent",
		"event",
		"phase",
		"prepared",
		"map",
		"p",
		"pointer",
		"starting",
		"ending",
		"deltaSource",
		"interactable",
		"touches",
		"touchDistance",
		"box",
		"touchBBox",
		"ds",
		"touchAngle",
		"da",
		"prevEvent",
		"number",
		"Infinity",
		"isNaN"
	],
	"mappings": "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",
	"sourcesContent": [
		"import InteractEvent from '../core/InteractEvent'\nimport { ActionName, Scope } from '../core/scope'\nimport * as utils from '../utils/index'\n\nexport type GesturableMethod = Interact.ActionMethod<Interact.GesturableOptions>\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction {\n    gesture?: {\n      angle: number           // angle from first to second touch\n      distance: number\n      scale: number           // gesture.distance / gesture.startDistance\n      startAngle: number      // angle of line joining two touches\n      startDistance: number   // distance between two touches of touchStart\n    }\n  }\n}\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    gesturable: GesturableMethod\n  }\n}\n\ndeclare module '@interactjs/core/defaultOptions' {\n  interface ActionDefaults {\n    gesture: Interact.GesturableOptions\n  }\n}\n\ndeclare module '@interactjs/core/scope' {\n  interface Actions {\n    [ActionName.Gesture]?: typeof gesture\n  }\n\n  // eslint-disable-next-line no-shadow\n  enum ActionName {\n    Gesture = 'gesture'\n  }\n}\n\n(ActionName as any).Gesture = 'gesture'\n\nexport interface GestureEvent extends Interact.InteractEvent<ActionName.Gesture> {\n  distance: number\n  angle: number\n  da: number // angle change\n  scale: number // ratio of distance start to current event\n  ds: number // scale change\n  box: Interact.Rect // enclosing box of all points\n  touches: Interact.PointerType[]\n}\n\nexport interface GestureSignalArg extends Interact.DoPhaseArg {\n  iEvent: GestureEvent\n  interaction: Interact.Interaction<ActionName.Gesture>\n  event: Interact.PointerEventType | GestureEvent\n}\n\nfunction install (scope: Scope) {\n  const {\n    actions,\n    Interactable,\n    defaults,\n  } = scope\n\n  /**\n   * ```js\n   * interact(element).gesturable({\n   *     onstart: function (event) {},\n   *     onmove : function (event) {},\n   *     onend  : function (event) {},\n   *\n   *     // limit multiple gestures.\n   *     // See the explanation in {@link Interactable.draggable} example\n   *     max: Infinity,\n   *     maxPerElement: 1,\n   * })\n   *\n   * var isGestureable = interact(element).gesturable()\n   * ```\n   *\n   * Gets or sets whether multitouch gestures can be performed on the target\n   *\n   * @param {boolean | object} [options] true/false or An object with event\n   * listeners to be fired on gesture events (makes the Interactable gesturable)\n   * @return {boolean | Interactable} A boolean indicating if this can be the\n   * target of gesture events, or this Interactable\n   */\n  Interactable.prototype.gesturable = function (this: Interact.Interactable, options: Interact.GesturableOptions | boolean) {\n    if (utils.is.object(options)) {\n      this.options.gesture.enabled = options.enabled !== false\n      this.setPerAction('gesture', options)\n      this.setOnEvents('gesture', options)\n\n      return this\n    }\n\n    if (utils.is.bool(options)) {\n      this.options.gesture.enabled = options\n\n      return this\n    }\n\n    return this.options.gesture as Interact.Options\n  } as GesturableMethod\n\n  actions[ActionName.Gesture] = gesture\n  actions.names.push(ActionName.Gesture)\n  utils.arr.merge(actions.eventTypes, [\n    'gesturestart',\n    'gesturemove',\n    'gestureend',\n  ])\n  actions.methodDict.gesture = 'gesturable'\n\n  defaults.actions.gesture = gesture.defaults\n}\n\nconst gesture = {\n  id: 'actions/gesture',\n  install,\n  listeners: {\n    'interactions:action-start': updateGestureProps,\n    'interactions:action-move': updateGestureProps,\n    'interactions:action-end': updateGestureProps,\n\n    'interactions:new': ({ interaction }) => {\n      interaction.gesture = {\n        angle: 0,\n        distance: 0,\n        scale: 1,\n        startAngle: 0,\n        startDistance: 0,\n      }\n    },\n  },\n\n  defaults: {\n  },\n\n  checker (_pointer, _event, _interactable, _element, interaction: { pointers: { length: number } }) {\n    if (interaction.pointers.length >= 2) {\n      return { name: 'gesture' }\n    }\n\n    return null\n  },\n\n  getCursor () {\n    return ''\n  },\n}\n\nfunction updateGestureProps ({ interaction, iEvent, event, phase }: GestureSignalArg) {\n  if (interaction.prepared.name !== 'gesture') { return }\n\n  const pointers = interaction.pointers.map(p => p.pointer)\n  const starting = phase === 'start'\n  const ending = phase === 'end'\n  const deltaSource = interaction.interactable.options.deltaSource\n\n  iEvent.touches = [pointers[0], pointers[1]]\n\n  if (starting) {\n    iEvent.distance = utils.pointer.touchDistance(pointers, deltaSource)\n    iEvent.box      = utils.pointer.touchBBox(pointers)\n    iEvent.scale    = 1\n    iEvent.ds       = 0\n    iEvent.angle    = utils.pointer.touchAngle(pointers, deltaSource)\n    iEvent.da       = 0\n\n    interaction.gesture.startDistance = iEvent.distance\n    interaction.gesture.startAngle = iEvent.angle\n  }\n  else if (ending || event instanceof InteractEvent) {\n    const prevEvent = interaction.prevEvent as GestureEvent\n\n    iEvent.distance = prevEvent.distance\n    iEvent.box      = prevEvent.box\n    iEvent.scale    = prevEvent.scale\n    iEvent.ds       = 0\n    iEvent.angle    = prevEvent.angle\n    iEvent.da       = 0\n  }\n  else {\n    iEvent.distance = utils.pointer.touchDistance(pointers, deltaSource)\n    iEvent.box      = utils.pointer.touchBBox(pointers)\n    iEvent.scale    = iEvent.distance / interaction.gesture.startDistance\n    iEvent.angle    = utils.pointer.touchAngle(pointers, deltaSource)\n\n    iEvent.ds = iEvent.scale - interaction.gesture.scale\n    iEvent.da = iEvent.angle - interaction.gesture.angle\n  }\n\n  interaction.gesture.distance = iEvent.distance\n  interaction.gesture.angle = iEvent.angle\n\n  if (utils.is.number(iEvent.scale) &&\n      iEvent.scale !== Infinity &&\n      !isNaN(iEvent.scale)) {\n    interaction.gesture.scale = iEvent.scale\n  }\n}\n\nexport default gesture\n"
	]
}